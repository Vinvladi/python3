""" Функция range()
С помощью функции range() можно сформировать конечную арифметическую прогрессию
в конструкции цикла for

range(5)
console: range(0, 5)
type (range(5))
console: <class 'range'>
list(range(5))
console: [0,1,2,3,4]
аналогично list(range(17)) # 17 не будет входить в последовательность
console: [0,1,2,3,4,5,6,7,8,9,10...15,16]
Заметим, что параметр который задан в скобке равен количеству элементов последовательности

Еще 2 примера интересных
при list(range(0)) и list(range(-6)) мы получим в обоих случаях
console: []
Это связано с тем, что range по умолчанию создает возрастающую арифметическую прогрессию

Но если мы хотим последовательность от определенного члена до n-го
list(range(10,20))
console: [10,11,12,...,18,19]

list(range(10,100)) но и тут последовательность арифметическая будет
console: [10,11,12,...,97,98,99]

list(range(10,5))
console: []

list(range(1,100,10))
console: [1,11,21,...,71,81,91]

list(range(10,0,-1))
console: [10,9,8,7,...2,1]

list(range(0,100,2))
console: [0,2,4,..,98]

Сумма последовательности
sum(range(1,100))
console: 5050
Посчитать количество элементов последовательности
len(range(1,100))
console : 100
len(range(5,15,5))
console : 2

Можно использовать значение
a,b,c = range(5,8)
print(a,b,c)
console: 5,6,7

также в переменную мы можем сохранить результат нашей функции
r = range(1,7)
len(r)
console: 6
r[1]  #доступно обращение по индексам! (Также как и везде индексация начинается с 0)
console: 2

range - является Iterable(Итерируемый) - объект, предоставляющий возможность поочередного прохода по своим элементам.

iter(range(5))  # таким образом мы создаем итератор и сохраним это в переменную v
v
console: <range_iterator object ....>

Пока нам итератор не знаком, но мы можем к нему вызывать функцию next
next(v)
мы будем получать информацию какой объект сейчас итерируется (то есть проходится)

next(v)
console: 0
next(v)
console: 1
v.__next__()
console: 2
v.__next__()
console: 3
next(v)
console: 4
Но если мы еще захотим пройтись по элементам с помощью next, то нам в консоле выведет ошибку
console: next(v)
StopIteration
n = iter([43,Thue,'hello'])
next(n)
console: 43
next(n)
console: Thue

Получается итерируемыми объектами могут быть list, range, str
m = iter('hi')
next(m)

Числа не итерируемые объекты

for i in range(4):  #цикл for за нас будет вызывать метод next, 0 до 3
    print(i)

"""