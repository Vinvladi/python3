""" Цикл for. Обход списков и строк:
Формат цикла for

for <переменная> in <объект>:
    <тело цикла>

a = [43,65,3,54,6]
for i in a:
    print(i)

Улучшим программу добавим туда переменную count, которая считает количество элементов (кол-во элементов листа)
a = [43,65,3,54,6]
count = 0
for i in a:
    print(i)
    count+=1
    print(count,'обход')
    input() # данный модуль позволяет по одному элементу стартовать в цикле for

В console:
43
1 обход
       # пустая строчка и необходимо в console нажать enter
65
2 обход

и так далее до 5-го

Цикл for делается столько раз, сколько элементов в a = list

a =[43,65,3,54,6]
count = 0
for i in a:
    print(i)
    i+=5 # не будет влиять, так как i все равно пойдет по a
print(a)

a =[43,65,3,54,6]
count = 0
for i in a:
    i+=5  # но сама переменная увеличивается на 5 и в console мы увидим
    print(i)
print(a)

console:
48
70
8
59
11
[43,65,3,54,6] - конкретно тут не изменяется

Это происходит потому что в переменную i мы помещаем дубль элемента
(i+=5  # но сама переменная увеличивается на 5 и в console мы увидим
    print(i)) <---- здесь мы операции делаем над копиями значений

Обход по значению
a = [43,65,3,54,6]
count = 0
for i in a:
    print(i, a.index(i)) # здесь будет выводить индексы элементов
# Но если в программе будут дубли элементов, то программа не будет верно работать , так как метод индекс будет искать значение

Обходы по индексу элемента
a = [43,65,3,54,6]
for i in range(len(a)):
    print(i, a[i])
console:
0 43
1 65
2 3
3 43
4 6

a = [43,65,3,54,6]
n =len(a)
for i in range(n):
    print(i, a[i])

Но что интересно в этом методе, при таком обходе мы можем пройти по индексу элемента и a[i] - значение элемента
a = [43,65,3,54,6]
n =len(a)
for i in range(n):
    print(i, a[i])
    a[i] +=5
print(a)
console:
0 43
1 65
2 3
3 43
4 3
5 54
6 3
[48, 70, 8, 48, 8, 49, 8]

Первый метод лучше всего применять, когда надо просуммировать список, найти минимальный элемент
Но если в задаче необходимо узнать номер элемента или соседние элементы, то мы должны выбирать второй метод

Задача: Необходимо удалить все дубли из a = list
a = [1,2,3,4,32,4,5,3,5]  # мы будем обходить по значениям
b = []
for i in a:
    if not i in b: (if i in b - это означает, что в списке b есть элемент i, для того чтобы записывалось 1 раз надо добавить not i)
        b.append(i)
print(b)
console:
[1,2,3,4,32,5] - мы видим наш список без дублей

Задача нам нужно разделить наш list и положить элементы в четное и нечетное (четное/нечетное = переменная list)
a = [1,2,3,4,32,4,5,3,5]
chet=[]
necht=[]
n = len(a)
for i in range(n):
    if a[i]%2 == 0:
        chet.append(i)
    else:
        necht.append(i)
print(chet)
print(necht)
console:
[1,3,4,5]
[0,2,6,7,8] - нулевой элемент и так далее

Чтобы привести немного в более человеческий вид (с 1 до n)

a = [1,2,3,4,32,4,5,3,5]
chet=[]
necht=[]
n = len(a)
for i in range(n):
    if a[i]%2 == 0:
        chet.append(i+1) # здесь i+1 (чтобы индекс шли от 1, и так далее)
    else:
        necht.append(i+1) # аналогично и тут (чтобы индекс шли от 1, и так далее)
print(chet)
print(necht)
console:
[2, 4, 5, 6]
[1, 3, 7, 8, 9]


Также данный метод работает со строкой s = str
s ='hello world'
for i in s:
    print(i)

s = 'hello WOrld'
for i in s:
    if i>='a' and i<='z':
        print(i,'small')
    elif i>='A' and i<='Z': # или можно записать "A" <= i <="Z"
        print(i,'big')
    else:
        print(i)

vowels = 'aeiou'
s = 'aertiooikjoaikl'
s[1] --> s[2]
s[2] --> s[3]

s[i] --> s[i+1]

s = 'aertiooikjoaikl'
n = len(s)
for i in range(n): # Описание снизу здесь должно быть n-1
    print(s[i], s[i+1])

console : Вывет ошибку, так как последний элемент будет выходить за range =>

s = 'aertiooikjoaikl'
n = len(s)
for i in range(n-1): # Описание снизу здесь должно быть n-1
    print(s[i], s[i+1])

Осталось только сделать проверку

s = 'aertiooikjoaikl'
n = len(s)
for i in range(n-1): # Описание снизу здесь должно быть n-1
    if s[i] in vowels and s[i+1] in vowels:
        print(s[i], s[i+1])


"""